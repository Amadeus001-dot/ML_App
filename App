import seaborn as sns
import os
import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import metrics

matplotlib.use('Agg')


def main():
    """Common ML dataset explorer"""
    st.title("LIVARES  INFOTECH")
    st.write('Course: SWE6204 ')
    st.write('Course Tutor: Rehana Kalam ')
    st.write('Student Name: Daniel Tabangoli ')
    st.write('Student ID: 2018463 ')
    st.title("Machine Learning Application")

    st.subheader("Using streamlit app to explore Machine Learning Datasets")

    st.sidebar.subheader("Upload Files Here")

    def save_uploadedFile(uploadedFile):
        with open(os.path.join("./datasets", uploadedFile.name), "wb") as f:
            f.write(uploadedFile.getBuffer())
        return st.success("Saved file: {} to datasets".format(uploadedFile.name))

    datafile = st.sidebar.file_uploader(
        "Upload CSV", type=['csv'])

    filename = datafile
    st.info('You selected {}'.format(filename))

    if filename is not None:
        # read data
        df = pd.read_csv(filename)
        with st.expander("Automated Code Snippet for Reading CSV file"):
            st.write("df = pd.read_csv(\"" + str(filename.name) + "\")")

    # show dataset
    if filename is not None and st.checkbox("Show Dataset"):
        # HEAD
        number1 = int(st.number_input("Number of rows to view", None, None, 1))
        st.dataframe(df.head(number1))
        st.dataframe(df.tail(number1))
        with st.expander("Automated Code Snippet for showing header dataframe"):
            st.write("df.head(" + str(number1) + ")")
            st.write("df.tail(" + str(number1) + ")")
    # show columns
    st.subheader('EXPLORATORY DATA ANALYSIS')
    if filename is not None and st.button("View Column Names"):
        st.write(df.columns)

    # show info
    if filename is not None and st.button("View info"):
        st.write(df.info)

    # show description
    if filename is not None and st.button("View Describe"):
        st.write(df.describe())

    # show size
    if filename is not None and st.button("View Size"):
        st.write(df.size)

    # show shapes
    if filename is not None and st.button("Show Shape of the dataset"):
        st.write(df.shape)

    # show summary
    if filename is not None and st.checkbox("Summary"):
        st.write(df.describe().T)

    # customizable plot
    st.subheader("DATA VISUALIZATION")
    # Correlation
    # Seaborn Plot
    if filename is not None and st.checkbox("Heatmap"):
        st.write(sns.heatmap(df.corr(), cmap='viridis', annot=True))
        st.pyplot()
    if filename is not None and st.checkbox("Pairplot"):
        st.write(sns.pairplot(df))
        st.pyplot()
    if filename is not None and st.checkbox("Scatter plot"):
        st.write(sns.scatterplot(data=df, x='Avg. Area House Age', y='Price', hue='Price'))
        st.pyplot()
    if filename is not None and st.checkbox('Joint plot'):
        st.write(sns.jointplot(data=df, x='Avg. Area House Age', y='Price', kind='reg'))
        st.pyplot()
    st.subheader("MACHINE LEARNING MODEL")
    st.subheader("outliers")

    # CHECKING MISSING VALUES
    if filename is not None and st.button("check null values"):
        st.write(df.isna().sum())

    if filename is not None and st.button("Boxplot"):
        st.write(plt.boxplot(df['Price']))
        st.write(plt.title('Boxplot of the price'))
        st.pyplot()
    if filename is not None and st.button("Quartile values"):
        q1 = np.percentile(df['Price'], 25, interpolation='midpoint')
        q2 = np.percentile(df['Price'], 50, interpolation='midpoint')
        q3 = np.percentile(df['Price'], 75, interpolation='midpoint')

        st.write("The 25th percentile of the data is :", q1)
        st.write("The 50th percentile of the data is :", q2)
        st.write("The 75th percentile of the data is :", q3)

    if filename is not None and st.button("Lower & upper limit"):
        q1 = np.percentile(df['Price'], 25, interpolation='midpoint')
        q2 = np.percentile(df['Price'], 50, interpolation='midpoint')
        q3 = np.percentile(df['Price'], 75, interpolation='midpoint')
        iqr = q3-q1
        low_limit = q1-1.5*iqr
        upper_limit = q3-1.5*iqr
        st.write("The upper limit is:", upper_limit)
        st.write("The lower limit is:", low_limit)
    if filename is not None and st.button("show the median", key='14'):
        st.write(df['Price'].median())

    if filename is not None and st.button("print outlier"):
        q1 = np.percentile(df['Price'], 25, interpolation='midpoint')
        q2 = np.percentile(df['Price'], 50, interpolation='midpoint')
        q3 = np.percentile(df['Price'], 75, interpolation='midpoint')
        iqr = q3 - q1
        low_limit = q1 - 1.5 * iqr
        upper_limit = q3 - 1.5 * iqr
        for x in df['Price']:
            outlier = []
            if ((x < low_limit) or (x > upper_limit)):
                outlier.append(x)
                st.write(outlier)
    if filename is not None and st.button("Boxplot result"):
        q1 = np.percentile(df['Price'], 25, interpolation='midpoint')
        q2 = np.percentile(df['Price'], 50, interpolation='midpoint')
        q3 = np.percentile(df['Price'], 75, interpolation='midpoint')
        iqr = q3 - q1
        low_limit = q1 - 1.5 * iqr
        upper_limit = q3 - 1.5 * iqr
        st.write("The upper limit is:", upper_limit)
        st.write("The lower limit is:", low_limit)

        ind1 = df['Price'] > upper_limit
        a = df.loc[ind1].index
        st.write(a)
        df.drop(a, inplace=True)
        st.write(plt.boxplot(df['Price']))
        st.write(plt.title('Box plot of Price'))
        st.pyplot()
    st.subheader("preprocessing")
    if filename is not None and st.checkbox("Dataset divided into X and y"):
        X = df[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',
                         'Avg. Area Number of Bedrooms', 'Area Population']]
        Y= df[['Price']]

        st.write('X variable')
        st.write(X.head())
        st.write('Y variable')
        st.write(Y.head())
    if filename is not None and st.button("Scaled Data", key='1'):
        scaler = StandardScaler()
        x_scaled = scaler.fit_transform(X)
        st.write('**type**')
        st.write(type(x_scaled))
        st.write('**printing data scaled**')
        x_scaled_df = pd.DataFrame(x_scaled, columns=X.columns)
        st.write(x_scaled_df.head())

    st.subheader("Train & Test Data")
    if filename is not None and st.button("Trained Data & Tested Data", key='2'):
        X = df[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',
                'Avg. Area Number of Bedrooms', 'Area Population']]
        Y = df[['Price']]
        X_train, X_test, Y_train, Y_test = train_test_split(
            X, Y, test_size=0.3, random_state=101)
        st.write('**trained data**')
        st.write('**X_train**')
        st.write(X_train.head())
        st.write('**X_test**')
        st.write(X_test.head())
        st.write('**tested data**')
        st.write('**Y_test**')
        st.write(Y_test.head())

    st.subheader("Build Model")
    if filename is not None and st.button("Train the model", key='3'):
        X = df[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',
                'Avg. Area Number of Bedrooms', 'Area Population']]
        Y = df[['Price']]
        X_train, X_test, Y_train, Y_test = train_test_split(
            X, Y, test_size=0.3, random_state=101)
        lm = LinearRegression()
        model = lm.fit(X_train, Y_train)
        st.write(model)
        st.success("MODEL SUCCESSFULLY BUILT")
        st.balloons()

    st.subheader("Feature Importance")
    if filename is not None and st.button("Coefficient", key='7'):
        X = df[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',
                'Avg. Area Number of Bedrooms', 'Area Population']]
        Y = df[['Price']]
        X_train, X_test, Y_train, Y_test = train_test_split(
            X, Y, test_size=0.3, random_state=101)
        lm = LinearRegression()
        model = lm.fit(X_train, Y_train)
        coefficient = lm.coef_
        st.write("The coefficient is: ", coefficient)

    if filename is not None and st.button("check the Score", key='50'):
        X = df[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',
                'Avg. Area Number of Bedrooms', 'Area Population']]
        Y = df[['Price']]
        X_train, X_test, Y_train, Y_test = train_test_split(
            X, Y, test_size=0.3, random_state=101)
        lm = LinearRegression()
        model = lm.fit(X_train, Y_train)
        st.write(model.score(X_train, Y_train))

    if filename is not None and st.button("Intercept", key='6'):
        X = df[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',
                'Avg. Area Number of Bedrooms', 'Area Population']]
        Y = df[['Price']]
        X_train, X_test, Y_train, Y_test = train_test_split(
            X, Y, test_size=0.3, random_state=101)
        lm = LinearRegression()
        model = lm.fit(X_train, Y_train)
        intercept = lm.intercept_
        st.write("The intercept is: ", intercept)
    st.subheader("Distribution of Prediction Probalities")
    if filename is not None and st.button("Test the model", key='9'):
        X = df[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',
                'Avg. Area Number of Bedrooms', 'Area Population']]
        Y = df[['Price']]
        X_train, X_test, Y_train, Y_test = train_test_split(
            X, Y, test_size=0.3, random_state=101)
        lm = LinearRegression()
        model = lm.fit(X_train, Y_train)
        predictions = lm.predict(X_test)
        st.write(predictions[:20])
    if filename is not None and st.button("predicted values(max,min,avg)", key='20'):
        X = df[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',
                'Avg. Area Number of Bedrooms', 'Area Population']]
        Y = df[['Price']]
        X_train, X_test, Y_train, Y_test = train_test_split(
            X, Y, test_size=0.3, random_state=101)
        lm = LinearRegression()
        model = lm.fit(X_train, Y_train)
        predictions = lm.predict(X_test)
        st.write("The maximum value is:", predictions.max())
        st.write("The minimum value is:", predictions.min())
        st.write("The average value is:", predictions.mean())

    if filename is not None and st.button("Result with scatter plot", key='11'):
        X = df[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',
                'Avg. Area Number of Bedrooms', 'Area Population']]
        Y = df[['Price']]
        X_train, X_test, Y_train, Y_test = train_test_split(
            X, Y, test_size=0.3, random_state=101)
        lm = LinearRegression()
        model = lm.fit(X_train, Y_train)
        predictions = lm.predict(X_test)

        plt.scatter(Y_test, predictions)
        st.pyplot()
    if filename is not None and st.button("Plot the distribution", key='13'):
        X = df[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',
                'Avg. Area Number of Bedrooms', 'Area Population']]
        Y = df[['Price']]
        X_train, X_test, Y_train, Y_test = train_test_split(
            X, Y, test_size=0.3, random_state=101)
        lm = LinearRegression()
        model = lm.fit(X_train, Y_train)
        predictions = lm.predict(X_test)
        st.write(sns.displot(Y_test - predictions, bins=50))
        st.write(plt.savefig('distribution_of_residuals.png'))
        st.pyplot()
    if filename is not None and st.button("Evaluate the performance", key='15'):
        X = df[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',
                'Avg. Area Number of Bedrooms', 'Area Population']]
        Y = df[['Price']]
        X_train, X_test, Y_train, Y_test = train_test_split(
            X, Y, test_size=0.3, random_state=101)
        lm = LinearRegression()
        model = lm.fit(X_train, Y_train)
        predictions = lm.predict(X_test)
        mse = metrics.mean_squared_error(Y_test, predictions)
        rmse = np.sqrt(metrics.mean_squared_error(Y_test, predictions))
        mae = metrics.mean_absolute_error(Y_test, predictions)

        st.write("The mean squared error is:", mse)
        st.write("The root mean squared error is:", rmse)
        st.write("The mean absolute error is:", mae)


if __name__ == "__main__":
    main()
